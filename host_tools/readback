#!/usr/bin/env python
"""
Memory Readback Tool

A frame consists of four sections:
1. One byte for the length of the password.
2. The variable-length password.
3. Four bytes for the start address.
4. Four bytes for the number of bytes to read.

  [ 0x01 ]  [ variable ]  [ 0x04 ]    [ 0x04 ]
-------------------------------------------------
| PW Length | Password | Start Addr | Num Bytes |
-------------------------------------------------
"""

import serial
import struct
import sys
import argparse
import os

from helpers.Crypt import Crypt, PAGE_SIZE
from math import ceil

RESP_OK = b'\x00'
RESP_ERROR = b'\x01'

FILE_DIR = os.path.abspath(os.path.dirname(__file__))

def construct_request(crypt, start_addr, num_bytes):

    nonce = struct.unpack(">I", crypt.getNonce())[0]
    seed = struct.unpack(">I", crypt.getRandomBytes(4))[0]
    header = struct.pack('>IIII', nonce, start_addr, num_bytes, seed)
    header_enc, iv = crypt.encode(header)
    
    return struct.pack('>H16s16s', len(header_enc) + 16, iv, header_enc)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Memory Readback Tool')

    parser.add_argument("--port", help="Serial port to send update over.",
                        required=True)
    parser.add_argument("--address", help="First address to read from.",
                        required=True)
    parser.add_argument("--num-bytes", help="Number of bytes to read.",
                        required=True)
    parser.add_argument("--datafile", help="File to write data to (optional).")
    args = parser.parse_args()

    num_bytes = int(args.num_bytes)

    crypt = Crypt(FILE_DIR)
    request = construct_request(crypt, int(args.address), num_bytes)

    # Open serial port. Set baudrate to 115200. Set timeout to 2 seconds.
    ser = serial.Serial(args.port, baudrate=9600, timeout=20)

    # Wait for bootloader to reset/enter readback mode.
    while ser.read(1) != 'R':
        pass

    # Send the request.
    ser.write(request)
    
    resp1 = ser.read()
    resp2 = ser.read()
    if resp1 != RESP_OK or resp2 != RESP_OK:
        raise RuntimeError("ERROR: Bootloader responded with {}".format(repr(resp2)))

    numFrames = int(ceil(num_bytes / float(PAGE_SIZE)))


    dec_data = ''
    for i in range(numFrames):
        data = ser.read(16 + PAGE_SIZE)
        iv = data[0:16]
        data = data[16:]

        dec_data += crypt.decode(data, iv)


    # Read the data and write it to stdout (hex encoded).
    print(dec_data[:num_bytes].encode('hex'))

    # Write raw data to file (optional).
    if args.datafile:
        with open(args.datafile, 'wb+') as datafile:
            datafile.write(dec_data[:num_bytes])
