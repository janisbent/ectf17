#!/usr/bin/env python
"""
Firmware Bundle-and-Protect Tool

"""
import argparse
import shutil
import struct
import os


from cStringIO import StringIO
from intelhex import IntelHex
#from helpers.Crypt import Crypt
#from helpers.Crypt import MAX_DATA_SIZE
from math import ceil

FILE_DIR = os.path.abspath(os.path.dirname(__file__))
FRAME_SIZE = 512

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--infile",
                        help="Path to the firmware image to protect.",
                        required=True)
    parser.add_argument("--outfile", help="Filename for the output firmware.",
                        required=True)
    parser.add_argument("--version", help="Version number of this firmware.",
                        required=True)
    parser.add_argument("--message", help="Release message for this firmware.",
                        required=True)
    args = parser.parse_args()

    # Get binary data from hex file
    firmware = IntelHex(args.infile)
    sio = StringIO()
    firmware.tobinfile(sio)
    hex_data = sio.getvalue()

    # Pack metadata
    metadata = struct.pack('>HHH', int(args.version), 
                           firmware.maxaddr() + 1, len(args.message) + 1)

    # Build data bundle
    bundleData  = metadata.ljust(FRAME_SIZE, '\00')
    bundleData += (hex_data[:-1]).ljust(FRAME_SIZE, '\00')
    bundleData += (args.message[:-1]).ljust(FRAME_SIZE, '\00')

    fw_frames = int(ceil(len(bundleData) / float(FRAME_SIZE))) - 1
    outfile = open(args.outfile, 'wb+')

    # Send frames
    for i in range(fw_frames):
        start = i * FRAME_SIZE
        end = (i + 1) * FRAME_SIZE
        frame = bundleData[start:end]

        ######### ENCRYPT FRAME ###############

        outfile.write(frame)
