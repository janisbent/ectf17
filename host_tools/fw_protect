#!/usr/bin/env python
"""
Firmware Bundle-and-Protect Tool

"""
import argparse
import struct
import os
from math import ceil

from intelhex import IntelHex
from helpers.Crypt import Crypt, PAGE_SIZE
from helpers.FirmwareFile import FirmwareFile

FILE_DIR = os.path.abspath(os.path.dirname(__file__))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--infile",
                        help="Path to the firmware image to protect.",
                        required=True)
    parser.add_argument("--outfile", help="Filename for the output firmware.",
                        required=True)
    parser.add_argument("--version", help="Version number of this firmware.",
                        required=True)
    parser.add_argument("--message", help="Release message for this firmware.",
                        required=True)
    args = parser.parse_args()

    if os.path.isfile(args.outfile):
        print("'" + args.outfile + "' already exists. Aborting...") 
        return

    # Parse Intel hex file.
    firmware = IntelHex(args.infile)
    crypt = Crypt(FILE_DIR)

    # Get version, size, and nonce.
    firmware_size = firmware.maxaddr() + 1
    version = int(args.version)
    nonce = int(crypt.getNonce().encode('hex'), 16)
    
    # The address is not sent, so we currently only support a single segment
    if len(firmware.segments()) > 1:
        raise RuntimeError("ERROR: Hex file contains multiple segments.")

    # starting at address 0.
    for segment_start, segment_end in firmware.segments():
        if segment_start != 0:
            raise RuntimeError("ERROR: Segment in Hex file does not start at address 0.")


    # Add release message to end of hex (null-terminated).
    firmware.putsz(firmware_size, (args.message + '\0'))
    fw = firmware.tobinstr()

    numFrames = int(ceil(len(fw) / float(PAGE_SIZE)))
    fw_file = FirmwareFile(args.outfile)

    size = 0
    for i in range(numFrames):
        start = i * PAGE_SIZE
        end = (i + 1) * PAGE_SIZE
        encPage, iv = crypt.encode(fw[start : end])
        fw_file.writePage(encPage, iv)
        size += len(encPage)

    # Pack and encrypt header
    header = struct.pack(">IHH", nonce, version, firmware_size)
    enc_header, header_iv = crypt.encode(header)

    fw_file.writeMetadata(enc_header, version, size, header_iv)


