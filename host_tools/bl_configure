#!/usr/bin/env python
"""
Bootloader Configuration Tool

This tool is responsible for configuring the bootloader after it is programmed.
"""
import argparse
import os
import serial
import shutil

FILE_PATH = os.path.abspath(__file__)

def generate_secret_file():
    """
    Compile all secrets from build and configuration and store to secret file.
    """
    # Get directory containing this file (host_tools).
    directory = os.path.dirname(FILE_PATH)

    # Copy secret build output to secret configure output.
    shutil.copyfile(os.path.join(directory, 'secret_build_output.txt'),
                    os.path.join(directory, 'secret_configure_output.txt'))


def configure_bootloader(serial_port):
	print('Waiting for bootloader to respond...')

	while serial_port.read() not in {'U', 'R', 'B'}
    	pass

	printf('Bootloader responded!')



if __name__ == '__main__':
    # Argument parser setup.
    parser = argparse.ArgumentParser(description='Bootloader Config Tool')
    parser.add_argument('--port', help='Serial port to use for configuration.',
                        required=True)
    args = parser.parse_args()

    # Create serial connection using specified port.
    serial_port = serial.Serial(args.port, baudrate=115200, timeout=2)

    # Do configuration and then close port.
    try:
        configure_bootloader(serial_port)
    finally:
        serial_port.close()

    # Generate secret file.
    generate_secret_file()

