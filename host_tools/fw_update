#!/usr/bin/env python
"""
Firmware Updater Tool

A frame consists of two sections:
1. Two bytes for the length of the data section
2. A data section of length defined in the length section

[ 0x02 ]  [ variable ]
--------------------
| Length | Data... |
--------------------

In our case, the data is from one line of the Intel Hex formated .hex file

We write a frame to the bootloader, then wait for it to respond with an
OK message so we can write the next frame. The OK message in this case is
just a zero
"""

import argparse
import json
import serial
import struct
import sys
import zlib
import time

from cStringIO import StringIO
from intelhex import IntelHex

RESP_OK = b'\x00'


class Firmware(object):
    """
    Helper for making frames.
    """

    BLOCK_SIZE = 16

    def __init__(self, fw_filename):
        with open(fw_filename, 'rb') as fw_file:
            data = fw_file.read()
            #data = zlib.decompress(data)
            data = json.loads(data, encoding="ascii")
            self.header = data['header'].decode('hex')
            self.fw_size = data['size']
            self.data = data['data'].decode('hex')


    def frames(self):
    # Construct frame from data and length.
        for address in range(0, self.fw_size, self.BLOCK_SIZE):
            # Frame should be BLOCK_SIZE unless it is the last frame.
            data = self.data[address:address + self.BLOCK_SIZE]
            # Get length of frame.
            length = len(data)
            frame_fmt = '>H{}s'.format(length)

            # Construct frame.
            yield struct.pack(frame_fmt, length, data)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--port", help="Serial port to send update over.",
                        required=True)
    parser.add_argument("--firmware", help="Path to firmware image to load.",
                        required=True)
    parser.add_argument("--debug", help="Enable debugging messages.",
                        action='store_true')
    args = parser.parse_args()

    firmware = Firmware(args.firmware)
    # Open serial port. Set baudrate to 115200. Set timeout to 2 seconds.
    print('Opening serial port...')
    ser = serial.Serial(args.port, baudrate=9600, timeout=3)

    # Open our firmware file.
    print('Opening firmware file...')
    print('Version: {}'.format(firmware.version))
    print('Size: {} bytes (not including release message)'.format(firmware.size))

    print('Waiting for bootloader to enter update mode...')
    while ser.read(1) != 'U':
        pass

    # Send header to the bootloader
    metadata = struct.pack('>H16s', 16, firmware.header)
    if args.debug:
        print(metadata.encode('hex'))
    ser.write(metadata)

    #print "Header frame: " + ser.read(16).encode('hex')
    #print "Header key: " + ser.read(16).encode('hex')
    #print "Header decrypted: " + ser.read(16).encode('hex')

    # Wait for an OK from the bootloader.
    resp1 = ser.read()
    resp2 = ser.read()
    if resp1 != RESP_OK or resp2 != RESP_OK:
        raise RuntimeError("ERROR: Bootloader responded with {}".format(repr(resp2)))

    for idx, frame in enumerate(firmware.frames()):
        if args.debug:
            print("Writing frame {} ({} bytes)...".format(idx, len(frame)))

        ser.write(frame)  # Write the frame...

        if args.debug:
            print(frame.encode('hex'))

        #print "Body frame: " + ser.read(16).encode('hex')
        #print "Body key: " + ser.read(16).encode('hex')
        #print "Body decrypted: " + ser.read(16).encode('hex')
        resp = ser.read()  # Wait for an OK from the bootloader

        time.sleep(0.1)

        if resp != RESP_OK:
            raise RuntimeError("ERROR: Bootloader responded with {}".format(repr(resp)))

        if args.debug:
            print("Resp: {}".format(ord(resp)))

    print("Done writing firmware.")

    # Send a zero length payload to tell the bootlader to finish writing
    # it's page.
    ser.write(struct.pack('>H', 0x0000))

