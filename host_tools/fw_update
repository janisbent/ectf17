#!/usr/bin/env python
"""
Firmware Updater Tool

A frame consists of two sections:
1. Two bytes for the length of the data section
2. A data section of length defined in the length section

[ 0x02 ]  [ variable ]
--------------------
| Length | Data... |
--------------------

In our case, the data is from one line of the Intel Hex formated .hex file

We write a frame to the bootloader, then wait for it to respond with an
OK message so we can write the next frame. The OK message in this case is
just a zero
"""

import argparse
import json
import serial
import struct
import sys
import zlib
import time

from cStringIO import StringIO
from intelhex import IntelHex
from helpers.FirmwareFile import FirmwareFile

RESP_OK = b'\x00'

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--port", help="Serial port to send update over.",
                        required=True)
    parser.add_argument("--firmware", help="Path to firmware image to load.",
                        required=True)
    parser.add_argument("--debug", help="Enable debugging messages.",
                        action='store_true')
    args = parser.parse_args()

    print('Opening serial port...')
    ser = serial.Serial(args.port, baudrate=9600, timeout=3)

    firmware = FirmwareFile(args.firmware)
    fw_Metadata = firmware.getMetadata()
    # Open our firmware file.
    print('Opening firmware file...')
    print('Version: {}'.format(fw_Metadata['version']))
    print('Size: {} bytes'.format(fw_Metadata['size']))

    # Send header to the bootloader
    str_fmt = '>H16s{}s'.format(len(fw_Metadata['header']))
    metadata = struct.pack(str_fmt, 16 + len(fw_Metadata['header']), fw_Metadata['iv'], fw_Metadata['header'])

    print('Waiting for bootloader to enter update mode...')
    while ser.read(1) != 'U':
        pass

    if args.debug:
        print(fw_Metadata['iv'].encode('hex'))
        print(metadata.encode('hex'))

    ser.write(metadata)

    #print "Header frame: " + ser.read(16).encode('hex')
    #print "Header key: " + ser.read(16).encode('hex')
    #print "Header decrypted: " + ser.read(16).encode('hex')

    # Wait for an OK from the bootloader.
    resp1 = ser.read()
    resp2 = ser.read()
    if resp1 != RESP_OK or resp2 != RESP_OK:
        raise RuntimeError("ERROR: Bootloader responded with {}".format(repr(resp2)))

    count = 1
    for page in firmware:
        if args.debug:
            print("Writing frame {} ({} bytes)...".format(count, len(page['msg'])))

        frame_fmt = '>H{}s{}s'.format(len(page['iv']), len(page['msg']))
        frame = struct.pack(frame_fmt, 16 + len(page['msg']), page['iv'], page['msg'])

        ser.write(frame)  # Write the frame...

        if args.debug:
            print(page['msg'].encode('hex'))

        #print "Body frame: " + ser.read(16).encode('hex')
        #print "Body key: " + ser.read(16).encode('hex')
        #print "Body decrypted: " + ser.read(16).encode('hex')
        resp = ser.read()  # Wait for an OK from the bootloader

        time.sleep(0.1)

        if resp != RESP_OK:
            raise RuntimeError("ERROR: Bootloader responded with {}".format(repr(resp)))

        if args.debug:
            print("Resp: {}".format(ord(resp)))

    print("Done writing firmware.")

    # Send a zero length payload to tell the bootlader to finish writing
    # it's page.
    ser.write(struct.pack('>H', 0x0000))

