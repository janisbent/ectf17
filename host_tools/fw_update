#!/usr/bin/env python
"""
Firmware Updater Tool

A frame consists of two sections:
1. Two bytes for the length of the data section
2. A data section of length defined in the length section

[ 0x02 ]  [ variable ]
--------------------
| Length | Data... |
--------------------

In our case, the data is from one line of the Intel Hex formated .hex file

We write a frame to the bootloader, then wait for it to respond with an
OK message so we can write the next frame. The OK message in this case is
just a zero
"""

import argparse
import json
import serial
import struct
import sys
import zlib
import time

from cStringIO import StringIO
from intelhex import IntelHex

RESP_OK = b'\x00'
RESP_RT = b'\x99'
RESP_ER = b'\xFF'

FRAME_SIZE = 16

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--port", help="Serial port to send update over.",
                        required=True)
    parser.add_argument("--firmware", help="Path to firmware image to load.",
                        required=True)
    parser.add_argument("--debug", help="Enable debugging messages.",
                        action='store_true')
    args = parser.parse_args()

    # Open serial port. Set baudrate to 115200. Set timeout to 2 seconds.
    print('Opening serial port...')
    ser = serial.Serial(args.port, baudrate=115200, timeout=2)

    # Open firmware file.
    print('Opening firmware file...')

    with file(args.firmware, "rb") as firmware:
        print('Total Size: {} bytes'.format(len(firmware.read())))
        firmware.seek(0)

        print('Waiting for bootloader to enter update mode...')
        while ser.read(1) != 'U':
            pass

        frameNum = 0
        for frame in iter(lambda: firmware.read(FRAME_SIZE), ''):
            if frameNum == 0:
                print("Writing header...")

            if args.debug:
                print("Writing frame {}".format(frameNum))

            if args.debug:
                print(frame.encode('hex'))

            ser.write(frame)

            # Wait for an OK from the bootloader.
            resp = ser.read()
            time.sleep(0.1)
            if resp != RESP_OK:
                raise RuntimeError("ERROR: Bootloader responded with {}".format(repr(resp)))

            if args.debug:
                print("Resp: {}".format(ord(resp)))
    
            frameNum += 1

    ser.write(struct.pack('>H', 0x0000))

    print("Done writing firmware.")

