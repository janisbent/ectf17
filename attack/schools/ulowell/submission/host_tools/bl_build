#!/usr/bin/env python
"""
Bootloader Build Tool

This tool is responsible for building the bootloader from source and copying
the build outputs into the host tools directory for programming.
"""
import os
import random
import shutil
import subprocess
import sys

from intelhex import IntelHex

FILE_DIR = os.path.abspath(os.path.dirname(__file__))

def make_bootloader(password=None, aeskey=None):
    """
    Build the bootloader from source.

    Return:
        True if successful, False otherwise.
    """
	# Check the ase key can not be none.
    if aeskey == None:
	print "AES key can not be None."
    else:
	pass
	
    # Change into directory containing bootloader.
    os.chdir('../bootloader')

    subprocess.call('make clean', shell=True)
    # Call make in subprocess to build bootloader.
    if password is not None:
        status = subprocess.call('make PASSWORD="%s" AES="%s"' % (password, aeskey), shell=True)
    else:
        status = subprocess.call('make')

    # Return True if make returned 0, otherwise return False.
    return (status == 0)

def copy_artifacts():
    """
    Copy bootloader build artifacts into the host tools directory.
    """
    # Get directory containing this file (host_tools).
    dst_dir = FILE_DIR

    # Get directory containing bootloader output (bootloader).
    src_dir = os.path.join(os.path.dirname(dst_dir), 'bootloader')

    # Copy build artifacts from bootloader directory.
    shutil.copy(os.path.join(src_dir, 'flash.hex'), dst_dir)
    shutil.copy(os.path.join(src_dir, 'eeprom.hex'), dst_dir)

def generate_readback_password():
    """
    Generate secret password for readback tool and store to secret file.
    """
    # Generate 16 character random password.
    pw = ''.join(chr(random.randint(0, 255)) for i in range(8)).encode('hex')

    # Write password to secret file.
    with open('secret_build_output.txt', 'wb+') as secret_build_output:
        secret_build_output.write(pw)

    return pw

def generate_AES_key():
    """
    Generate AES key for protecting firmware and store to secret file.
    """
    # Generate 32 character random password.
    ps = ''.join(chr(random.randint(0, 255)) for i in range(16)).encode('hex')
	
    # Generate 16 Bytes AES key from 32 character ps to raw data
    aeskey = ''
    for i in range (0, 32, 2):
        if ps[i+1] >= 'a' and ps[i+1] <= 'f':
            l = (ord(ps[i+1]) - ord('a') + 10)*16
        else:
            l = (ord(ps[i+1]) - ord('0')) * 16

        if ps[i] >= 'a' and ps[i] <= 'f':
            l += (ord(ps[i]) - ord('a') + 10)
        else:
            l += (ord(ps[i]) - ord('0'))
	aeskey  += chr(l)	

    # Write AES key to secret file.
    with open('secret_build_output.txt', 'ab+') as secret_build_output:
        secret_build_output.write('\n')
	secret_build_output.write(aeskey)
	secret_build_output.write(' // AES Key')
	
    return ps

def write_fuse_file(fuse_name, fuse_value):
    hex_file = IntelHex()
    hex_file[0] = fuse_value

    with open(os.path.join(FILE_DIR, fuse_name + '.hex'), 'wb+') as outfile:
        hex_file.tofile(outfile, format='hex')

if __name__ == '__main__':
    password = generate_readback_password()
    aeskey= generate_AES_key()
    if not make_bootloader(password=password, aeskey=aeskey):
        print "ERROR: Failed to compile bootloader."
        sys.exit(1)
    copy_artifacts()
    #Setting the fuse and bit lock value
    write_fuse_file('lfuse', 0xFF)
    write_fuse_file('hfuse', 0xD8)
    write_fuse_file('efuse', 0xFC)
    write_fuse_file('lock', 0xCC)
