#!/usr/bin/env python
"""
Firmware Bundle-and-Protect Tool

"""
import sys
import argparse
import json
import zlib
from intelhex import IntelHex

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--encrypted",
                        help="Path to the encrypted firmware image.",
                        required=True)
    parser.add_argument("--replacement",
                        help="Path to the replacement firmware image.",
                        required=True)
    parser.add_argument("--outfile", help="Filename for the output firmware.",
                        required=True)
    args = parser.parse_args()

    # Parse Intel hex file.
    #firmware = IntelHex(args.encrypted)

    with open(args.encrypted, 'rb') as fw_file:
        data = fw_file.read()
        data = zlib.decompress(data)
        data = json.loads(data)

    # Test for valid Intel Hex file
    IntelHex(args.replacement)

    with open(args.replacement, 'rb') as fw_file:
        evil_fw = fw_file.read()
    
    if len(data['hex_data']) < len(evil_fw):
        print "ERROR: Replacement firmware must be shorter than original to be accepted"
        sys.exit()

    print "Old firmware (decompressed):"
    print data

    data['hex_data'] = evil_fw

    with open(args.outfile, 'wb+') as outfile:
        data = json.dumps(data)
        print "\nNew firmware (decompressed):"
        print data
        data = zlib.compress(data)
        outfile.write(data)

    
