#!/usr/bin/env python
"""
Bootloader Build Tool

This tool is responsible for building the bootloader from source and copying
the build outputs into the host tools directory for programming.
"""
import os
import random
import shutil
import subprocess
import sys
from binascii import hexlify

from intelhex import IntelHex

FILE_DIR = os.path.abspath(os.path.dirname(__file__))

# Turns b'\x10\x20\x30\x40' into b'\{16,32,48,64,\}', which will be #defined
# into the C file as {16,32,48,64,}
def get_c_array(key):
    string = '\{'
    for byte in key:
        string += '%s,' % ord(byte)
    string += '\}'

    return string

def make_bootloader(key1, key2):
    """
    Build the bootloader from source.

    Return:
        True if successful, False otherwise.
    """
    # Change into directory containing bootloader.
    os.chdir('../bootloader')

    subprocess.call('make clean', shell=True)

    key1_string = get_c_array(key1)
    key2_string = get_c_array(key2)

    # Call make in subprocess to build bootloader.
    status = subprocess.call('make KEY1="%s" KEY2="%s"' % (key1_string, key2_string), shell=True)

    # Return True if make returned 0, otherwise return False.
    return (status == 0)

def copy_artifacts():
    """
    Copy bootloader build artifacts into the host tools directory.
    """
    # Get directory containing this file (host_tools).
    dst_dir = FILE_DIR

    # Get directory containing bootloader output (bootloader).
    src_dir = os.path.join(os.path.dirname(dst_dir), 'bootloader')

    # Copy build artifacts from bootloader directory.
    shutil.copy(os.path.join(src_dir, 'flash.hex'), dst_dir)
    shutil.copy(os.path.join(src_dir, 'eeprom.hex'), dst_dir)

def generate_keys():
    """
    Generate secret password for readback tool and store to secret file.
    """
    key1 = os.urandom(16)
    key2 = os.urandom(16)

    # Write password to secret file.
    with open('secret_build_output.txt', 'wb+') as secret_build_output:
        secret_build_output.write(key1)
        secret_build_output.write(key2)

    return (key1, key2)

def write_fuse_file(fuse_name, fuse_value):
    hex_file = IntelHex()
    hex_file[0] = fuse_value

    with open(os.path.join(FILE_DIR, fuse_name + '.hex'), 'wb+') as outfile:
        hex_file.tofile(outfile, format='hex')

if __name__ == '__main__':
    key1, key2 = generate_keys()
    if not make_bootloader(key1, key2):
        print "ERROR: Failed to compile bootloader."
        sys.exit(1)
    copy_artifacts()
    write_fuse_file('lfuse', 0xFF)
    write_fuse_file('hfuse', 0xF8)
    write_fuse_file('efuse', 0xFC)
    write_fuse_file('lock',  0xCC)
