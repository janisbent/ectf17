#!/usr/bin/env python
"""
Bootloader Build Tool

This tool is responsible for building the bootloader from source and copying
the build outputs into the host tools directory for programming.
"""
import os
import random
import shutil
import subprocess
import sys

from intelhex import IntelHex
from helpers.Crypt import Crypt

FILE_DIR = os.path.abspath(os.path.dirname(__file__))

def encodeKeyAsHexStruct(key):
    key = key.encode('hex')
    strukt = "{"

    for i in range(0, len(key), 2):
        strukt += "0x" + key[i] + key[i + 1] + ", "

    strukt = strukt[:-2] + "}"

    return strukt

def createKeyFile():
    crypt = Crypt(FILE_DIR)
    aesKey = crypt.getAESKey()
    nonce = crypt.getNonce()

    aesKey = encodeKeyAsHexStruct(aesKey)
    nonce = encodeKeyAsHexStruct(nonce)

    fileStr = '''
/******** AUTOGENERATED FROM BL_BUILD -- DO NOT CHANGE ************/

#ifndef _KEYS_H_
#define _KEYS_H_
#include <avr/pgmspace.h>
#include <stdint.h>

uint8_t KEY[] EEMEM = {};
uint8_t NONCE[] EEMEM = {};

#endif //_KEYS_H_
            '''.format(aesKey, nonce)

    with open('include/keys.h', "w") as keyFile:
        keyFile.write(fileStr)

def make_bootloader():
    """
    Build the bootloader from source.

    Return:
        True if successful, False otherwise.
    """
    # Change into directory containing bootloader.
    os.chdir('../bootloader')

    subprocess.call('make clean', shell=True)
    # Call make in subprocess to build bootloader.

    print "Creating key file keys.h in 'src/bootloader/include/' ..."
    createKeyFile()
    print "Done. Compiling..."
    
    status = subprocess.call('make', shell=True)

    # Return True if make returned 0, otherwise return False.
    return (status == 0)

def copy_artifacts():
    """
    Copy bootloader build artifacts into the host tools directory.
    """
    # Get directory containing this file (host_tools).
    dst_dir = FILE_DIR

    # Get directory containing bootloader output (bootloader).
    src_dir = os.path.join(os.path.dirname(dst_dir), 'bootloader')

    # Copy build artifacts from bootloader directory.
    shutil.copy(os.path.join(src_dir, 'flash.hex'), dst_dir)
    shutil.copy(os.path.join(src_dir, 'eeprom.hex'), dst_dir)

def generate_secret_files():
    """
    Generate secret password for readback tool and store to secret file.
    """
    # Generate 16 character random password.
    pw = ''.join(chr(random.randint(0, 255)) for i in range(8)).encode('hex')

    # Write password to secret file.
    with open('secret_build_output.txt', 'wb+') as secret_build_output:
        secret_build_output.write(pw)

    return pw

def write_fuse_file(fuse_name, fuse_value):
    hex_file = IntelHex()
    hex_file[0] = fuse_value

    with open(os.path.join(FILE_DIR, fuse_name + '.hex'), 'wb+') as outfile:
        hex_file.tofile(outfile, format='hex')

if __name__ == '__main__':
    if not make_bootloader():
        print "ERROR: Failed to compile bootloader."
        sys.exit(1)
    copy_artifacts()
    write_fuse_file('lfuse', 0xFF)
    write_fuse_file('hfuse', 0x18)
    write_fuse_file('efuse', 0xFC)
    write_fuse_file('lock',  0xDC)


    #os.system("avrdude -P usb -p m1284p -c dragon_isp -B 200 -u -U flash:w:flash.hex:i -U eeprom:w:eeprom.hex:i -U lfuse:w:lfuse.hex:i -U hfuse:w:hfuse.hex:i -U efuse:w:efuse.hex:i -U lock:w:lock.hex:i")
