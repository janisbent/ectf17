#!/usr/bin/env python
"""
Bootloader Configuration Tool

This tool is responsible for configuring the bootloader after it is programmed.
"""
import argparse
import os
import serial
import shutil
import yaml

from Crypto.Cipher import AES
from Crypto import Random
from ecdsa import SigningKey, NIST192p

from crypto import pk_to_necc

FILE_PATH = os.path.abspath(__file__)


def generate_secret_file():
    """
    Compile all secrets from build and configuration and store to secret file.
    """
    # Get directory containing this file (host_tools).
    directory = os.path.dirname(FILE_PATH)

    # Generate AES Firmware Key
    firm_key_size = 16
    firm_iv =  Random.new().read(AES.block_size)
    firm_key = Random.new().read(firm_key_size)

    # Generate a new hmac key
    hmac_key = Random.new().read(32)

    # Generate an ECDSA key
    sign_key = SigningKey.generate(curve=NIST192p)
    verify_key = sign_key.get_verifying_key()
    necc_verify_key = pk_to_necc(verify_key)

    # Write out to configure file
    with open('secret_configure_output.txt', 'wb') as secret_configure_output:
        output = {
            'firm_key': firm_key,
            'firm_iv': firm_iv,
            'sign_key': sign_key.to_pem(),
            'verify_key': verify_key.to_pem(),
            'necc_verify_key': necc_verify_key,
            'hmac_key': hmac_key
        }
        yaml.dump(output, secret_configure_output, default_flow_style=False)


def configure_bootloader(serial_port):
    # Deserialize yaml and pass along aes / verify_key
    with open('secret_configure_output.txt') as secret_configure_output:
        data = yaml.load(secret_configure_output)
        serial_port.write('\x01')
        serial_port.write(data['firm_key'])
        serial_port.write(data['firm_iv'])
        serial_port.write(data['hmac_key'])
        serial_port.write(data['necc_verify_key'].decode('hex'))


if __name__ == '__main__':
    # Argument parser setup.
    parser = argparse.ArgumentParser(description='Bootloader Config Tool')
    parser.add_argument('--port', help='Serial port to use for configuration.',
                        required=True)
    args = parser.parse_args()

    # Create serial connection using specified port.
    serial_port = serial.Serial(args.port, baudrate=115200)

    # Generate secret file.
    generate_secret_file()

    # Do configuration and then close port.
    try:
        configure_bootloader(serial_port)
    finally:
        serial_port.close()
